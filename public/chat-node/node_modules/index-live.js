//var app     = require('express')();
var http = require('http').Server();
var io = require('socket.io')(http);
//io.set('origins','http://localhost:*');
var mysql = require('mysql');
var sanitze = require('sanitizer');
var connection = mysql.createConnection({
   host: '192.168.4.11',
    user: 'connect2student',
    password: 'connect2student',
	database: 'connect2student'
});
var debug = true;
connection.connect();
try {
    var usernames = {};
    io.on('connection', function(socket) {

        try {
            socket.on('chat message', function(msg) {
                var obj = JSON.parse(msg);
                var conversationId = obj.conversationId;
                var receiever = obj.receiever;
                var sender = obj.sender;
                var message = sanitze.sanitize(obj.message);
                //console.log('message: ' + message);

                // sender is valid or not 
                connection.query('SELECT * from cs_user_profiles where id =?', [sender], function(err, rows, fields) {

                    if (rows.length > 0) {
                        var userConversationId;
                        // lets insert this 
                        var data = {conversation_id: conversationId, sender_id: sender, receiver_id: receiever, message: message};
                        var d = new Date();
                        d = d.getFullYear() + "-" + ('0' + (d.getMonth() + 1)).slice(-2) + "-" + ('0' + d.getDate()).slice(-2) + " " + ('0' + d.getHours()).slice(-2) + ":" + ('0' + d.getMinutes()).slice(-2) + ":" + ('0' + d.getSeconds()).slice(-2);
						var t = new Date();
						var hours = t.getHours();
						var ampm = hours >= 12 ? 'PM' : 'AM';
						hours = hours % 12;
						hours = hours ? hours : 12;
						t = t.getFullYear() + "-" + ('0' + (t.getMonth() + 1)).slice(-2) + "-" + ('0' + t.getDate()).slice(-2) + " " + (hours) + ":" + ('0' + t.getMinutes()).slice(-2)+' '+ ampm;
                        //LETS CHECK IF CONVERSATION ID IS 0 THEN CREATE CONVERSATION FIRST.
                        if (data.conversation_id == 0 || data.conversation_id == undefined) {

// CREATE NEW CONVERSATION HERE
                            connection.query('INSERT INTO cs_conversations (`sender_user_id`, `receiver_user_id`, `created`, `modified`) VALUES ("' + data.sender_id + '", "' + data.receiver_id + '", "' + d + '", "' + d + '" )', function(err, result) {
                                if (err)
                                    throw err;
                                userConversationId = result.insertId;
                                //console.log("lastinsertId>" + result.insertId);

                                connection.query('INSERT INTO cs_chats (`conversation_id`, `sender_id`, `receiver_id`, `message`, `created`, `modified`) VALUES ("' + userConversationId + '", "' + data.sender_id + '", "' + data.receiver_id + '", "' + data.message + '", "' + d + '", "' + d + '")', function(err, result) {
									//console.log("lastinsertIdchat>" + result.insertId);
                                    if (err)
                                        throw err;
                                    connection.query('select first_name, profile_pic from cs_user_profiles where id =?', [socket.username], function(err, profileRows, fields) {

                                        if (usernames.hasOwnProperty(receiever)) {
                                            var user_socket_length = Object.keys(usernames[receiever]).length;
                                            for (var i = 0; i < user_socket_length; i++) {
                                                usernames[receiever][i].emit('chat message', {
                                                    sender_name: profileRows[0].first_name,
                                                    profile_pic: 'http://ds412.projectstatus.co.uk/connect2student/uploads/user_profile_pics/avatar/'+profileRows[0].profile_pic,
                                                    conversation_id: userConversationId,
                                                    receiever: receiever,
                                                    sender: data.sender_id,
                                                    message: message,
													created:t													
                                                });
                                            }
                                        }
//if (usernames.hasOwnProperty(sender) && Object.keys(usernames[sender]).length > 1) {
                                        if (usernames.hasOwnProperty(sender)) {
                                            var sender_socket_length = Object.keys(usernames[sender]).length;
                                            for (var i = 0; i < sender_socket_length; i++) {

                                                usernames[sender][i].emit('chat message', {
                                                    sender_name: profileRows[0].first_name,
                                                    profile_pic:  'http://ds412.projectstatus.co.uk/connect2student/uploads/user_profile_pics/avatar/'+profileRows[0].profile_pic,
                                                    conversation_id: userConversationId,
                                                    receiever: receiever,
                                                    sender: data.sender_id,
                                                    message: message,
													created:t
                                                });
                                            }
                                        }

                                    });
                                });
                                // NOW LETS TELL OUR CONVERSATION THAT WE ARE FIRST (FOR NEWEST CONVERSATION)
                                connection.query('UPDATE cs_conversations SET `modified` = "' + d + '" WHERE `id` = "' + userConversationId + '"  ', function(err, result) {
                                    if (err)
                                        throw err;
                                });
                            });
                        } else {
							// WE DO HAVE A CONVERSATION LETS START FROM HERE NOW 

                            userConversationId = data.conversation_id;
                            connection.query('INSERT INTO cs_chats (`conversation_id`, `sender_id`, `receiver_id`, `message`, `created`, `modified`) VALUES ("' + userConversationId + '", "' + data.sender_id + '", "' + data.receiver_id + '", "' + data.message + '", "' + d + '", "' + d + '")', function(err, result) {
								console.log("lastinsertIdchat>" + result.insertId);
                                if (err)
                                    throw err;
								
									//var chatcreated = chatresult;
                                connection.query('select first_name, profile_pic from cs_user_profiles where id =?', [socket.username], function(err, profileRows, fields) {
									
									//console.log(profileRows);
                                    if (usernames.hasOwnProperty(receiever)) {
                                        var user_socket_length = Object.keys(usernames[receiever]).length;
                                        for (var i = 0; i < user_socket_length; i++) {
                                            usernames[receiever][i].emit('chat message', {
                                                sender_name: profileRows[0].first_name,
                                                profile_pic: 'http://ds412.projectstatus.co.uk/connect2student/uploads/user_profile_pics/avatar/'+profileRows[0].profile_pic,
                                                conversation_id: userConversationId,
                                                receiever: receiever,
                                                sender: data.sender_id,
                                                message: message,
												created: t
                                            });
                                        }
                                    }
//if (usernames.hasOwnProperty(sender) && Object.keys(usernames[sender]).length > 1) {
                                    if (usernames.hasOwnProperty(sender)) {
                                        var sender_socket_length = Object.keys(usernames[sender]).length;
                                        for (var i = 0; i < sender_socket_length; i++) {

                                            usernames[sender][i].emit('chat message', {
                                                sender_name: profileRows[0].first_name,
                                                profile_pic: 'http://ds412.projectstatus.co.uk/connect2student/uploads/user_profile_pics/avatar/'+profileRows[0].profile_pic,
                                                conversation_id: userConversationId,
                                                receiever: receiever,
                                                sender: data.sender_id,
                                                message: message,
												created: t
                                            });
                                        }
                                    }

                                });
								
                            });
                            // NOW LETS TELL OUR CONVERSATION THAT WE ARE FIRST (FOR NEWEST CONVERSATION)
                            connection.query('UPDATE cs_conversations SET `modified` = "' + d + '" WHERE `id` = "' + userConversationId + '"  ', function(err, result) {
                                if (err)
                                    throw err;
                            });
                        }



                    } else {
                        var data = {result: 'error', message: 'sender is not valid'};
                        socket.emit('notify', data);
                    }


                });
                // receiver is friend of sender
                // seder and recevier are both premium members
                // 
            });
        } catch (err) {
//OH MY GOD SOME EXCEPTION OCCURED
            console.log('Chat Message' + err);
        }


        try {

            socket.on('group notification', function(groupData) {
                var obj = JSON.parse(groupData);
                var action = obj.action;
                if (action == 'userAdded') {

                    for (var i = 0; i < obj.member.length; i++) {

                        receiver = obj.member[i].id;
                        if (usernames.hasOwnProperty(receiver)) {
                            var receiver_socket_length = Object.keys(usernames[receiver]).length;
                            for (var i = 0; i < receiver_socket_length; i++) {

                                usernames[receiver][i].emit('group notification', {
                                    action: obj.action,
                                    groupId: obj.groupId,
                                    group_message: obj.groupMessage,
                                    groupName: obj.groupName,
                                    conversationValue: obj.conversationValue,
									created: t
                                });
                            }
                        }
                    }


                    //LETS TELL THIS NEWLY ADDED USER STORY TO ALL GROUP MEMBERS
                    /*
                    connection.query('SELECT * from cs_group_members where group_id =?', [obj.groupId], function(err, rows, fields) {
                        if (err)
                            throw err;
                        // NOW LETS SEND THIS MESSAGE TO WHOLE GROUP
                        for (i = 0; i < rows.length; i++) {
                            if (usernames.hasOwnProperty(rows[i].user_id)) {
                                var user_socket_length = Object.keys(usernames[rows[i].user_id]).length;
                                for (var a = 0; a < user_socket_length; a++) {
                                    usernames[receiver][i].emit('group notification', {
                                        action: 'newUserAdded',
                                        group_message: obj.groupMessage,
                                        groupId: obj.groupId
                                    });
                                }
                            }
                        }

                    });
                    */



                }
                else if (action == 'userDeleted') {
                    console.log('Action -> In Deleted');
                    receiver = obj.userId;

                    if (usernames.hasOwnProperty(receiver)) {
                        var receiver_socket_length = Object.keys(usernames[receiver]).length;
                        for (var i = 0; i < receiver_socket_length; i++) {

                            usernames[receiver][i].emit('group notification', {
                                action: obj.action,
                                groupId: obj.groupId
                            });
                        }
                    }
                }

            });
        } catch (groupERR) {


        }


        try {
            socket.on('is_typing', function(typingInfo) {

                var obj = JSON.parse(typingInfo);
                var typing_for_username = obj.typing_for;
                var typist_username = obj.who_is_typing;
                var typing_status = obj.typing_status;
                var typist_name = obj.typist_name;
                if (usernames.hasOwnProperty(typing_for_username)) {
                    var user_socket_length = Object.keys(usernames[typing_for_username]).length;
                    for (var i = 0; i < user_socket_length; i++) {
                        usernames[typing_for_username][i].emit('is_typing', {
                            typing_for: typing_for_username,
                            who_is_typing: typist_username,
                            typing_status: typing_status,
                            'typist_name': typist_name
                        });
                    }
                }
            });
        } catch (isTypingErr) {
            console.log(isTypingErr);
        }


        try {
            socket.on('is_typing_group', function(typingData) {
//                console.log(typingData);
                var obj = JSON.parse(typingData);
                var typist_username = obj.who_is_typing;
                var typing_status = obj.typing_status;
                var typist_name = obj.typist_name;
                var group_id = obj.groupId;
                connection.query('SELECT * from cs_group_members where group_id =?', [group_id], function(err, rows, fields) {
                    if (err)
                        throw err;
                    for (i = 0; i < rows.length; i++) {


                        if (usernames.hasOwnProperty(rows[i].user_id)) {
                            var user_socket_length = Object.keys(usernames[rows[i].user_id]).length;
                            for (var a = 0; a < user_socket_length; a++) {

                                usernames[rows[i].user_id][a].emit('is_typing_group', {
                                    who_is_typing: typist_username,
                                    typing_status: typing_status,
                                    'typist_name': typist_name,
									'group_id':group_id
                                });
                            }
                        }
                    }
                });
            });
        } catch (IsTypingGroupErr) {

        }


        try {

            socket.on('group message', function(msg) {

                var obj = JSON.parse(msg);
                var groupId = obj.groupId;
                var message = sanitze.sanitize(obj.message);
                var conversationId = obj.conversationId;
                var sender = obj.sender;
				var sender_name = obj.sender_name;
                // LETS CHECK IF THIS GROUP IS EXIST OR NOT IN OUR DB
                connection.query('SELECT * from cs_groups where id =?', [groupId], function(err, rows, fields) {

                    // LETS CHECK IF THE SENDER USER IS IN GROUP MEMBERS OR NOT 
                    console.log(rows);
                    console.log(sender);

                    connection.query('SELECT count(*) as total FROM cs_group_members where group_id = "' + groupId + '" AND user_id = "' + sender + '"', function(err, totalRows, fields) {


                        if (totalRows[0].total > 0)
                        {

                            if (rows.length > 0) {
                                //NOW LETS INSERT THIS MESSAGE TO OUR GROUP TABLE
                                var d = new Date();
                                d = d.getFullYear() + "-" + ('0' + (d.getMonth() + 1)).slice(-2) + "-" + ('0' + d.getDate()).slice(-2) + " " + ('0' + d.getHours()).slice(-2) + ":" + ('0' + d.getMinutes()).slice(-2) + ":" + ('0' + d.getSeconds()).slice(-2);
								var t = new Date();
								var hours = t.getHours();
								var ampm = hours >= 12 ? 'PM' : 'AM';
								hours = hours % 12;
								hours = hours ? hours : 12;
								t = t.getFullYear() + "-" + ('0' + (t.getMonth() + 1)).slice(-2) + "-" + ('0' + t.getDate()).slice(-2) + " " + (hours).slice(-2) + ":" + ('0' + t.getMinutes()).slice(-2)+' '+ ampm;
								
                                connection.query('INSERT INTO cs_chats (`conversation_id`, `sender_id`, `message`, `created`, `modified`) VALUES ("' + conversationId + '","' + sender + '", "' + message + '", "' + d + '", "' + d + '")', function(err, result) {

                                    // WHOOOP OUR CONVERSATION IS NOW IN CHATS TABLE LETS BROADCAST THIS MESSAGE TO REST OF ALL USERS 
                                    // LETS FETCH THE GROUP MEMBERS
                                    connection.query('SELECT * from cs_group_members where group_id =?', [groupId], function(err, rows, fields) {
                                        if (err)
                                            throw err;
                                        profile_pic = '';
                                        connection.query('select profile_pic from cs_user_profiles where id =?', [socket.username], function(err, profileRows, fields) {
                                            if (err)
                                                throw err;
                                            // NOW LETS SEND THIS MESSAGE TO WHOLE GROUP
                                            for (i = 0; i < rows.length; i++) {
                                                if (usernames.hasOwnProperty(rows[i].user_id)) {
                                                    var user_socket_length = Object.keys(usernames[rows[i].user_id]).length;
                                                    for (var a = 0; a < user_socket_length; a++) {
                                                        usernames[rows[i].user_id][a].emit('group message', {
                                                            profile_pic: 'http://ds412.projectstatus.co.uk/connect2student/uploads/user_profile_pics/avatar/'+profileRows[0].profile_pic,
                                                            receiever: rows[i].user_id,
															groupId:groupId,
                                                            sender: sender,
                                                            message: message,
															sender_name:sender_name,
															created:t
                                                        });
                                                    }
                                                }
                                            }
                                        });
                                    });
                                });
                                // NOW LETS TELL OUR CONVERSATION THAT WE ARE FIRST (FOR NEWEST CONVERSATION)
                                connection.query('UPDATE cs_conversations SET `modified` = "' + d + '" WHERE `id` = "' + conversationId + '"  ', function(err, result) {
                                    if (err)
                                        throw err;
                                });
                            }

                        }
                        else {
                            console.log('in else');


                            if (usernames.hasOwnProperty(sender)) {
                                var sender_socket_length = Object.keys(usernames[sender]).length;
                                for (var i = 0; i < sender_socket_length; i++) {

                                    usernames[sender][i].emit('group notification', {
                                        action: 'notExists',
                                        groupId: groupId,
                                        conversationValue: obj.conversationId,
										sender_name:sender_name
                                    });
                                }
                            }

                        }

                    });
                });
            });
        } catch (isGroupErr) {
            console.log(isGroupErr);
        }






        try {
            socket.on('add user', function(username) {

                console.log("Connected > " + username);
                if (usernames.hasOwnProperty(username)) {
					console.log('connect if');
                    var total_socket_length = Object.keys(usernames[username]).length;
                    socket.username = username;
                    socket.socketIndex = total_socket_length;
                    usernames[username][total_socket_length] = socket;
                } else {
					console.log('connect else');
                    socket.username = username;
                    socket.socketIndex = 0;
                    var temp = {};
                    temp[0] = socket;
                    usernames[username] = temp;
                }
				console.log('==============================');
				console.log('username = '+socket.username);
				console.log('==============================');
            });
        } catch (err) {
            console.log(err)
        }
        socket.on('disconnect', function() {
            var socketIndex = socket.socketIndex;
            var disconnectedUser = socket.username;
            if (typeof disconnectedUser != 'undefined' && typeof socket.socketIndex != 'undefined') {
//                console.log('deleting : '+socket.username);
                var universal_length = Object.keys(usernames[socket.username]).length;
                /*
                 if (Object.keys(usernames[socket.username]).length == 1) {
                 connection.connect(config, function(err) {
                 var request = new connection.Request();
                 request.query("update user_profiles set online_status = 0 where id=" + socket.username, function(err, recordset) {
                 console.log(socket.username + ' is offline');
                 io.emit('user_online', {profie_id: socket.username, status: 0});
                 });
                 });
                 delete usernames[socket.username];
                 } else {
                 delete usernames[socket.username][socket.socketIndex];
                 var j = 0;
                 var socketHolder = {};
                 for (var i = 0; i < universal_length; i++) {
                 if (typeof usernames[socket.username][i] !== 'undefined') {
                 usernames[socket.username][i].socketIndex = j;
                 socketHolder[j] = usernames[socket.username][i];
                 j++;
                 } else {
                 //console.log(i+'th position is deleted');
                 }
                 }
                 usernames[socket.username] = socketHolder;
                 }
                 */

            }
        });
    });
} catch (err) {
    console.log('server side err : ' + err);
}
http.listen(8585, function() {
    console.log('listening on *:8585');
});
function insertChat(userConversationId, data) {

    connection.query('INSERT INTO cs_chats (`conversation_id`, `sender_id`, `receiver_id`, `message`) VALUES ("' + userConversationId + '", "' + data.sender_id + '", "' + data.receiver_id + '", "' + data.message + '")', function(err, result) {
        if (err)
            throw err;
//                            var data = {result: 'success', message: message};
//                            socket.emit('notify', data);

        if (usernames.hasOwnProperty(receiever)) {
            var user_socket_length = Object.keys(usernames[receiever]).length;
            for (var i = 0; i < user_socket_length; i++) {
                usernames[receiever][i].emit('chat message', {
                    receiever: receiever,
                    sender: socket.username,
                    message: message
                });
            }
        }
        //if (usernames.hasOwnProperty(sender) && Object.keys(usernames[sender]).length > 1) {
        if (usernames.hasOwnProperty(sender)) {
            var sender_socket_length = Object.keys(usernames[sender]).length;
            for (var i = 0; i < sender_socket_length; i++) {

                usernames[sender][i].emit('chat message', {
                    receiever: receiever,
                    sender: socket.username,
                    message: message
                });
            }
        }

    });
}